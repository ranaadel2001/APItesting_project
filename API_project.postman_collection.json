{
	"info": {
		"_postman_id": "37898a8e-d16b-4b49-aafa-35af7b084bbc",
		"name": "Bosta_APIz",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39855460"
	},
	"item": [
		{
			"name": "ValidID_7234258",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 100ms\", function () {\r",
							"    pm.response.to.have.responseTime.below(100);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema for required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('provider');\r",
							"    pm.expect(responseData).to.have.property('PromisedDate');\r",
							"    pm.expect(responseData).to.have.property('TrackingNumber');\r",
							"    pm.expect(responseData).to.have.property('TrackingURL');\r",
							"    pm.expect(responseData).to.have.property('SupportPhoneNumbers');\r",
							"    pm.expect(responseData).to.have.property('CreateDate');\r",
							"    pm.expect(responseData).to.have.property('isEditableShipment');\r",
							"    pm.expect(responseData).to.have.property('nextWorkingDay');\r",
							"    pm.expect(responseData).to.have.property('isOnlinePaymentFeatureEnabled');\r",
							"});\r",
							"\r",
							"pm.test(\"Presence of 'Content-Type' header in the response\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Next working day array should have expected elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.nextWorkingDay).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.nextWorkingDay.forEach(function(day) {\r",
							"        pm.expect(day).to.have.property('dayDate').that.is.a('string');\r",
							"        pm.expect(day).to.have.property('dayName').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PromisedDate is in a valid date format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.PromisedDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"IsOnlinePaymentFeatureEnabled is a boolean value\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.have.property('isOnlinePaymentFeatureEnabled').that.is.a('boolean');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"SupportPhoneNumbers array should not be empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.SupportPhoneNumbers).to.be.an('array').and.to.have.lengthOf.at.least(1, \"SupportPhoneNumbers array should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check for a specific value in the response body\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.TrackingNumber).to.equal(\"7234258\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Presence of 'Set-Cookie' header in the response\", function () {\r",
							"    pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Provider field exists\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.provider).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"PromisedDate field exists\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.PromisedDate).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"TrackingNumber field exists\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.TrackingNumber).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"TrackingURL field exists\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.TrackingURL).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"SupportPhoneNumbers field exists\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.SupportPhoneNumbers).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"CreateDate field exists\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.CreateDate).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"isEditableShipment field exists\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.isEditableShipment).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"nextWorkingDay field exists\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.nextWorkingDay).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"isOnlinePaymentFeatureEnabled field exists\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.isOnlinePaymentFeatureEnabled).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Next working day array should have expected elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.nextWorkingDay).to.be.an('array');\r",
							"    \r",
							"    responseData.nextWorkingDay.forEach(function(day) {\r",
							"        pm.expect(day).to.have.property('dayDate').that.is.a('string');\r",
							"        pm.expect(day).to.have.property('dayName').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PromisedDate is in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.PromisedDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"IsOnlinePaymentFeatureEnabled is a boolean value\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.have.property('isOnlinePaymentFeatureEnabled').that.is.a('boolean');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Requested-By",
						"value": "Landmark",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://tracking.bosta.co/shipments/track/7234258\n",
					"protocol": "https",
					"host": [
						"tracking",
						"bosta",
						"co"
					],
					"path": [
						"shipments",
						"track",
						"7234258\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "InvalidID_0000000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"pm.test(\"Response time is less than 100ms\", function () {\r",
							"    pm.response.to.have.responseTime.below(100);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - error and status\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - error and status\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Presence of specific header Content-Type in the response\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is set to application/json\", function () {\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Presence of specific header Content-Type in the response\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is set to application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body size is less than 1MB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(1024 * 1024);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Presence of specific keyword 'shipment' in the response body\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.include(\"shipment\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body size is less than 1MB\", function () {\r",
							"    const responseSize = pm.response.size();\r",
							"    pm.expect(responseSize).to.be.below(1024 * 1024);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Requested-By",
						"value": "Landmark",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://tracking.bosta.co/shipments/track/0000000\n",
					"protocol": "https",
					"host": [
						"tracking",
						"bosta",
						"co"
					],
					"path": [
						"shipments",
						"track",
						"0000000\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "ValidID_6636234",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 100ms\", function () {\r",
							"    pm.response.to.have.responseTime.below(100);\r",
							"});\r",
							"pm.test(\"Response time is lower than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required headers\", function () {\r",
							"    pm.expect(pm.response).to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error message is not empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData.error).to.exist.and.to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status message is not empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.status).to.exist.and.to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure of the response JSON\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body schema is valid\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.be.a('string');\r",
							"    pm.expect(responseData.status).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Ensure the response body has the required fields - error and status\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should be a non-empty string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should be a non-empty string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate that the response body is a JSON object\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is lower than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Requested-By",
						"value": "Landmark",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://tracking.bosta.co/shipments/track/6636234\n",
					"protocol": "https",
					"host": [
						"tracking",
						"bosta",
						"co"
					],
					"path": [
						"shipments",
						"track",
						"6636234\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "ValidID_9442984",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 100ms\", function () {\r",
							"    pm.response.to.have.responseTime.below(100);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('provider');\r",
							"    pm.expect(responseData).to.have.property('PromisedDate');\r",
							"    pm.expect(responseData).to.have.property('TrackingNumber');\r",
							"    pm.expect(responseData).to.have.property('TrackingURL');\r",
							"    pm.expect(responseData).to.have.property('SupportPhoneNumbers');\r",
							"    pm.expect(responseData).to.have.property('CreateDate');\r",
							"    pm.expect(responseData).to.have.property('isEditableShipment');\r",
							"    pm.expect(responseData).to.have.property('nextWorkingDay');\r",
							"    pm.expect(responseData).to.have.property('isOnlinePaymentFeatureEnabled');\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the header Content-Type: application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('provider');\r",
							"    pm.expect(responseData).to.have.property('PromisedDate');\r",
							"    pm.expect(responseData).to.have.property('TrackingNumber');\r",
							"    pm.expect(responseData).to.have.property('TrackingURL');\r",
							"    pm.expect(responseData).to.have.property('SupportPhoneNumbers');\r",
							"    pm.expect(responseData).to.have.property('CreateDate');\r",
							"    pm.expect(responseData).to.have.property('isEditableShipment');\r",
							"    pm.expect(responseData).to.have.property('nextWorkingDay');\r",
							"    pm.expect(responseData).to.have.property('isOnlinePaymentFeatureEnabled');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Next working day array is present and contains expected number of elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.nextWorkingDay).to.exist;\r",
							"    pm.expect(responseData.nextWorkingDay).to.be.an('array');\r",
							"    pm.expect(responseData.nextWorkingDay).to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"IsOnlinePaymentFeatureEnabled property is set to true\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.isOnlinePaymentFeatureEnabled).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Provider field is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.provider).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Provider field should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PromisedDate is in a valid date format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.PromisedDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"TrackingNumber is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.TrackingNumber).to.be.a('string').and.to.have.lengthOf.at.least(1, \"TrackingNumber should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"TrackingURL is a valid URL format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.TrackingURL).to.match(/^http(s)?:\\/\\/[a-zA-Z0-9-\\.]+\\.[a-zA-Z]{2,}(\\/\\S*)?$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"SupportPhoneNumbers array is present and not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.SupportPhoneNumbers).to.be.an('array').and.to.have.lengthOf.at.least(1, \"SupportPhoneNumbers array should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains isEditableShipment set to true\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData).to.have.property('isEditableShipment', true);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"IsEditableShipment should be true\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.isEditableShipment).to.be.true;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Requested-By",
						"value": "Landmark",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://tracking.bosta.co/shipments/track/9442984\n",
					"protocol": "https",
					"host": [
						"tracking",
						"bosta",
						"co"
					],
					"path": [
						"shipments",
						"track",
						"9442984\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "ValidID_1094442",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 100ms\", function () {\r",
							"    pm.response.to.have.responseTime.below(100);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema for required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData).to.have.property('provider');\r",
							"  pm.expect(responseData).to.have.property('PromisedDate');\r",
							"  pm.expect(responseData).to.have.property('TrackingNumber');\r",
							"  pm.expect(responseData).to.have.property('TrackingURL');\r",
							"  pm.expect(responseData).to.have.property('CreateDate');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"SupportPhoneNumbers array should not be empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.SupportPhoneNumbers).to.be.an('array').and.to.have.lengthOf.at.least(1, \"SupportPhoneNumbers array should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Next working day array has the correct structure and content\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.nextWorkingDay).to.be.an('array');\r",
							"    responseData.nextWorkingDay.forEach(function(day) {\r",
							"        pm.expect(day).to.be.an('object');\r",
							"        pm.expect(day.dayDate).to.be.a('string');\r",
							"        pm.expect(day.dayName).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.provider).to.exist;\r",
							"    pm.expect(responseData.PromisedDate).to.exist;\r",
							"    pm.expect(responseData.TrackingNumber).to.exist;\r",
							"    pm.expect(responseData.TrackingURL).to.exist;\r",
							"    pm.expect(responseData.CreateDate).to.exist;\r",
							"    pm.expect(responseData.SupportPhoneNumbers).to.exist;\r",
							"    pm.expect(responseData.isEditableShipment).to.exist;\r",
							"    pm.expect(responseData.nextWorkingDay).to.exist;\r",
							"    pm.expect(responseData.isOnlinePaymentFeatureEnabled).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"SupportPhoneNumbers array should not be empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.SupportPhoneNumbers).to.be.an('array').and.to.have.lengthOf.at.least(1, \"SupportPhoneNumbers array should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Next working day array has the correct structure and content\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.nextWorkingDay).to.be.an('array');\r",
							"\r",
							"    responseData.nextWorkingDay.forEach(function(day) {\r",
							"        pm.expect(day).to.be.an('object');\r",
							"        pm.expect(day.dayDate).to.be.a('string');\r",
							"        pm.expect(day.dayName).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Presence of 'Content-Type' header in the response\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Specific error message is not present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.not.have.property('specificErrorMessage');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Specific error code is not present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.not.have.property('SpecificErrorCode');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Specific success message is present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.include({ provider: \"\", PromisedDate: \"\", TrackingNumber: \"\", TrackingURL: \"\", SupportPhoneNumbers: [\"\"], CreateDate: \"\", isEditableShipment: true, nextWorkingDay: [{ dayDate: \"\", dayName: \"\" }], isOnlinePaymentFeatureEnabled: true });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Specific error message is not present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.not.have.property('errorMessage');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Specific error code is not present in the response\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.not.have.property('errorCode');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Requested-By",
						"value": "Landmark",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://tracking.bosta.co/shipments/track/1094442\n\n",
					"protocol": "https",
					"host": [
						"tracking",
						"bosta",
						"co"
					],
					"path": [
						"shipments",
						"track",
						"1094442\n\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Using Environment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 100ms\", function () {\r",
							"    pm.response.to.have.responseTime.below(100);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('provider');\r",
							"    pm.expect(responseData).to.have.property('PromisedDate');\r",
							"    pm.expect(responseData).to.have.property('TrackingNumber');\r",
							"    pm.expect(responseData).to.have.property('TrackingURL');\r",
							"    pm.expect(responseData).to.have.property('SupportPhoneNumbers');\r",
							"    pm.expect(responseData).to.have.property('CreateDate');\r",
							"    pm.expect(responseData).to.have.property('isEditableShipment');\r",
							"    pm.expect(responseData).to.have.property('nextWorkingDay');\r",
							"    pm.expect(responseData).to.have.property('isOnlinePaymentFeatureEnabled');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PromisedDate is in a valid date format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.PromisedDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Next working day structure is valid\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.nextWorkingDay).to.be.an('array');\r",
							"  \r",
							"  responseData.nextWorkingDay.forEach(function(day) {\r",
							"    pm.expect(day).to.have.property('dayDate').that.is.a('string');\r",
							"    pm.expect(day).to.have.property('dayName').that.is.a('string');\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"Presence of Content-Type header in the response\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header exists and has value 'application/json'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response size is within an acceptable range\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.all.keys(\r",
							"        \"provider\", \"PromisedDate\", \"TrackingNumber\", \"TrackingURL\", \"SupportPhoneNumbers\", \r",
							"        \"CreateDate\", \"isEditableShipment\", \"nextWorkingDay\", \"isOnlinePaymentFeatureEnabled\"\r",
							"    );\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure of the response body\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.provider).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.PromisedDate).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.TrackingNumber).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.TrackingURL).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.SupportPhoneNumbers).to.exist.and.to.be.an('array');\r",
							"    pm.expect(responseData.CreateDate).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.isEditableShipment).to.exist.and.to.be.a('boolean');\r",
							"    pm.expect(responseData.nextWorkingDay).to.exist.and.to.be.an('array');\r",
							"    pm.expect(responseData.isOnlinePaymentFeatureEnabled).to.exist.and.to.be.a('boolean');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Presence of Content-Type header in the response\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header exists and has value 'application/json'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response size is within an acceptable range\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.all.keys(\r",
							"        \"provider\", \"PromisedDate\", \"TrackingNumber\", \"TrackingURL\", \r",
							"        \"SupportPhoneNumbers\", \"CreateDate\", \"isEditableShipment\", \r",
							"        \"nextWorkingDay\", \"isOnlinePaymentFeatureEnabled\"\r",
							"    );\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Presence of isEditableShipment field in the response body\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('isEditableShipment');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Requested-By",
						"value": "Landmark",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseURL}}/shipments/track/{{TrackingNumber}}\n",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"shipments",
						"track",
						"{{TrackingNumber}}\n"
					]
				}
			},
			"response": []
		}
	]
}